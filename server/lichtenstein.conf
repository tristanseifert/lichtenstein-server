################################################################################
# this is a simple config file for testing purposes. all paths fall in the
# working directory.
################################################################################

################################################################################
# Logs can be sent to a file, the console, and syslog; or a combination of all
# three of these. It is possible to specify per source the minimum message
# level: 0 = trace, 1 = debug, 2 = info, 3 = warn, 4 = error, 5 = critical
logging: {
    # Logging to file
    file: {
        # Whether logging to a file is enabled
        #
        # Default: false
        enabled = true;

        # Path to the logfile
        #
        # Default: None
        path = "./lichtenstein.log";

        # The log file can be truncated on open.
        #
        # Default: false
        truncate = false;

        # Minimum log level that will be written to the log file
        #
        # Default: 2 
        level = 0;
    }

    # Logging to console
    console: {
        # Whether logging to the console is enabled
        #
        # Default: true
        enabled = true;

        # When enabled, console output can be colorized with ANSI escape codes.
        #
        # Default: false
        colorize = true;

        # Minimum log level that will be displayed on the console.
        #
        # Default: 2 
        level = 0;
    }

    # Logging to syslog
    syslog: {
        # Whether logging to syslog is enabled
        #
        # Default: false 
        enabled = false;

        # Syslog ident to use
        #
        # Default: "lichtenstein_server"
        ident = "lichtenstein_server";

        # Syslog facility to tag the logs with. This can be one of the standard
        # facility names; see man 3 syslog for more info.
        #
        # Default: local0
        facility = "local0";

        # Minimum log level that will be sent to syslog
        #
        # Default: 2 
        level = 2;
    }

    # Configuration for the asynchronous logging queue
    queue: {
        # Size of the queue used for async logging. Each entry in the queue is
        # about 256 bytes on x86_64.
        #
        # Default: 8192
        size = 8192;

        # Number of async logging threads to use. Values other than 1 can
        # result in out-of-order messages.
        #
        # Default: 1
        threads = 1;
    }
}
################################################################################
# All data for the server (effect code, state, groups, etc.) are stored in an
# SQLite3 store. A few options are configurable.
db: {
    # Path to the database file. This must be writeable by this process.
    path = "store/lichtenstein_server.sqlite3";
}

################################################################################
# Various parameters that configure the Lichtenstein protocol server.
server: {
    #  Where does the server listen?
    listen: {
        # Listen port; this is the UDP port on which the protocol server will
        # accept connections from nodes.
        #
        # Default: 7420
        port = 7420;

        # Address to which the server binds. Specify an empty string to listen
        # on all interfaces.
        #
        # Default: ""
        address = "::";

    }

    # The server uses DTLS to secure communication; this specifies the
    # certificate and crypto settings to use.
    tls: {
        # Path to certificate file. This should be a PEM-encoded certificate.
        # 
        # Default: (none)
        cert_path = "cert.pem";

        # Path to the certificate's private key file, also PEM-encoded. If the
        # key is protected by a passphrase, the server will expect the user to
        # enter it on stdin during startup.
        #
        # Default: (none)
        key_path = "key.pem";

        # Cipher string to use to initialize the DTLS context. An empty string
        # will use the TLS library defaults.
        #
        # Default: ""
        cipher_list = "";
     }
    
    # How long we should wait for a new DTLS connection. The higher this value,
    # the higher the latency from protocol server shutdown to the actual
    # actual termination of the server.
    #
    # Default: 5 (seconds)
    accept_timeout = 5;

    # Multicast group used for output synchronization.
    #
    # Default: 239.42.0.69
    sync_group = "239.42.0.69";
}

################################################################################
# A basic HTTP REST API is provided to control the server from external agents;
# it can be configured below.
api: {
    # Is the API server enabled?
    #
    # Default: false
    enabled = true;

    # Where the server listens
    listen: {
        # Listen port that the REST server runs on. Note that low port numbers
        # may require the server to start privileged.
        #
        # Default: 42000
        port = 42000;

        # Address on which the API server listens. This can be an IP address,
        # or a string like "localhost"
        #
        # Default: "127.0.0.1"
        address = "0.0.0.0";
    }

    # Controls whether the REST responses contain minified (packed) JSON, or if
    # it is human-readable.
    #
    # Default: true
    minify = false;
}

################################################################################
# Render tuning knobs
render: {
    # Pipeline configuration
    pipeline: {
        # Frames per second at which to run effects. Note that how close we get
        # to this rate depends entirely on the host system and its kernel task
        # scheduler.
        #
        # Default: 42.0
        fps = 42.0;

        # Rendering tasks are dispatched onto a thread pool; this determines
        # the number of threads in it.
        #
        # Default: 2
        threads = 2;
    }

    # Framebuffer config
    fb: {
        # Size of the framebuffer, in pixels.
        #
        # Default: 5000
        size = 5000;
    }
}
